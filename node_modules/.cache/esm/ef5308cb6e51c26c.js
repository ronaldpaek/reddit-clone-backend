let express,bcrypt,jwt,prisma;_6e5‍.x([["userRouter",()=>userRouter]]);_6e5‍.w("express",[["default",["express"],function(v){express=v}]]);_6e5‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_6e5‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_6e5‍.w("../index.js",[["prisma",["prisma"],function(v){prisma=v}]]);





       const userRouter = _6e5‍.a("express",express).Router();;_6e5‍.j(["userRouter"]);

userRouter.post("/register", async (req, res, next) => {
  try {
    const { username, password } = req.body;

    if (!username || !password) {
      return res.json({
        success: false,
        error: "You must provide a username and password when registering!",
      });
    }

    const checkUser = await _6e5‍.a("prisma",prisma).user.findUnique({
      where: {
        username,
      },
    });

    if (checkUser) {
      return res.json({
        success: false,
        error: "User already exists!",
      });
    }

    const hashedPassword = await _6e5‍.a("bcrypt",bcrypt).hash(password, 10);
    const user = await _6e5‍.a("prisma",prisma).user.create({
      data: {
        username,
        password: hashedPassword,
      },
    });
    const token = _6e5‍.a("jwt",jwt).sign({ userId: user.id }, process.env.JWT_SECRET);

    res.json({
      success: true,
      token,
    });
  } catch (err) {
    next(err);
  }
});

userRouter.post("/login", async (req, res, next) => {
  try {
    const { username, password } = req.body;

    if (!username || !password) {
      return res.json({
        success: false,
        error: "You must provide a username and password when logging in!",
      });
    }

    const user = await _6e5‍.a("prisma",prisma).user.findUnique({
      where: {
        username,
      },
    });

    if (!user) {
      return res.json({
        success: false,
        error: "User and/or password is invalid!",
      });
    }

    const isPasswordValid = await _6e5‍.a("bcrypt",bcrypt).compare(password, user.password);

    if (!isPasswordValid) {
      return res.json({
        success: false,
        error: "User and/or password is invalid!",
      });
    }

    const token = _6e5‍.a("jwt",jwt).sign({ userId: user.id }, process.env.JWT_SECRET);

    res.json({
      success: true,
      token,
    });
  } catch (err) {
    next(err);
  }
});

userRouter.get("/token", async (req, res, next) => {
  try {
    const token = req.headers.authorization.split(" ")[1];
    const { userId } = _6e5‍.a("jwt",jwt).verify(token, process.env.JWT_SECRET);
    const user = await _6e5‍.a("prisma",prisma).user.findUnique({
      where: {
        id: userId,
      },
    });

    delete user.password;

    res.json({
      success: true,
      user,
    });
  } catch (err) {
    next(err);
  }
});
